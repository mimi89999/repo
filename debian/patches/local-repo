Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 repo (2.6-1) unstable; urgency=medium
 .
   [ Marcos Marado ]
   * New upstream version 2.6
   * updated set-python-shebang.patch
   * Pass autopkg tests, by reverting dh compatibility (Closes: #949461)
Author: Marcos Marado <mindboosternoori@gmail.com>
Bug-Debian: https://bugs.debian.org/949461

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2020-04-23

--- repo-2.6.orig/repo
+++ repo-2.6/repo
@@ -492,7 +492,7 @@ def check_repo_rev(dst, rev, repo_verify
 
 
 def _Init(args, gitc_init=False):
-  """Installs repo by cloning it over the network.
+  """Installs repo by copying the python module
   """
   parser = GetParser(gitc_init=gitc_init)
   opt, args = parser.parse_args(args)
@@ -538,19 +538,19 @@ def _Init(args, gitc_init=False):
 
   _CheckGitVersion()
   try:
+    from repo import __path__ as repo_path
+    import shutil
     if not opt.quiet:
-      print('Downloading Repo source from', url)
+      print('Copying Repo source from', repo_path[0])
     dst = os.path.abspath(os.path.join(repodir, S_repo))
-    _Clone(url, dst, opt.clone_bundle, opt.quiet, opt.verbose)
-
-    remote_ref, rev = check_repo_rev(dst, rev, opt.repo_verify, quiet=opt.quiet)
-    _Checkout(dst, remote_ref, rev, opt.quiet)
+    shutil.copytree(repo_path[0], dst)
+    shutil.copy(os.path.abspath(__file__), dst)
 
     if not os.path.isfile(os.path.join(dst, 'repo')):
       print("warning: '%s' does not look like a git-repo repository, is "
             "REPO_URL set correctly?" % url, file=sys.stderr)
 
-  except CloneFailure:
+  except:
     if opt.quiet:
       print('fatal: repo init failed; run without --quiet to see why',
             file=sys.stderr)
